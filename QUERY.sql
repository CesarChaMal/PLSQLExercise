alter profile "DEFAULT" limit 
  password_life_time unlimited;

create profile unlimited_pwd_prof limit
  password_life_time unlimited;
alter user SYSTEM profile unlimited_pwd_prof;

alter user SYSTEM identified by "oracle";

alter profile unlimited_pwd_prof limit  
  password_reuse_max 10 
  password_reuse_time 365;
  
/*
    Desplegar total de salarios agrupados por job, solo de Programmer y todos los tipos de clerk (Purchasing Clerk, Shipping Clerk, Stock Clerk).
    Mostrar subtotales por job y el total general.
*/

SELECT 
    *
FROM 
    HR.EMPLOYEES E;

SELECT 
    *
FROM 
    HR.EMPLOYEES E
WHERE E.JOB_ID IN ('IT_PROG', 'ST_MAN');


SELECT 
    E.JOB_ID,
    SUM(E.SALARY) TOTAL
FROM 
    HR.EMPLOYEES E
WHERE E.JOB_ID IN ('IT_PROG', 'ST_MAN')
GROUP BY E.JOB_ID;

SELECT 
    E.JOB_ID,
    SUM(E.SALARY) TOTAL,
    SUM(SUM(E.SALARY)) OVER (PARTITION BY E.JOB_ID) TOTAL,
    SUM(SUM(E.SALARY)) OVER (ORDER BY E.JOB_ID) TOTAL_ACCUMULATED
FROM 
    HR.EMPLOYEES E
WHERE E.JOB_ID IN ('IT_PROG', 'ST_MAN')
GROUP BY E.JOB_ID;

SELECT 
    E.JOB_ID,
    SUM(E.SALARY) TOTAL,
    SUM(SUM(E.SALARY)) OVER (PARTITION BY E.JOB_ID) TOTAL,
    (SELECT SUM(SALARY) FROM HR.EMPLOYEES WHERE E.JOB_ID=JOB_ID) TOTAL,
    SUM(SUM(E.SALARY)) OVER (ORDER BY E.JOB_ID) TOTAL_ACCUMULATED
FROM 
    HR.EMPLOYEES E
WHERE E.JOB_ID IN ('IT_PROG', 'ST_MAN')
GROUP BY E.JOB_ID;

SELECT 
    E.JOB_ID, SUM(E.SALARY) TOTAL
FROM 
    HR.EMPLOYEES E
GROUP BY E.JOB_ID
ORDER BY E.JOB_ID ASC;

SELECT 
    E.JOB_ID, SUM(E.SALARY) TOTAL
FROM 
    HR.EMPLOYEES E
GROUP BY E.JOB_ID, E.SALARY;

SELECT 
    E.JOB_ID, SUM(E.SALARY) TOTAL
FROM 
    HR.EMPLOYEES E
GROUP BY E.JOB_ID
HAVING
    E.JOB_ID = 'IT_PROG' OR E.JOB_ID LIKE '%_CLERK'
ORDER BY E.JOB_ID ASC;


SELECT 
    *
FROM 
    HR.JOBS;

SELECT 
    MAX(J.JOB_TITLE) TITLE, SUM(E.SALARY) TOTAL
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.JOBS J
ON E.JOB_ID = J.JOB_ID
GROUP BY 
    E.JOB_ID
ORDER BY 
    E.JOB_ID ASC;
    
SELECT 
    MAX(J.JOB_TITLE) TITLE, SUM(E.SALARY) TOTAL
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.JOBS J
ON E.JOB_ID = J.JOB_ID
GROUP BY 
    E.JOB_ID
HAVING
    E.JOB_ID = 'IT_PROG' OR E.JOB_ID LIKE '%_CLERK'
ORDER BY 
    E.JOB_ID ASC;
    
SELECT 
    MAX(J.JOB_TITLE) TITLE, MAX(FIRST_NAME) EMPLOYEE, SUM(E.SALARY) TOTAL
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.JOBS J
ON E.JOB_ID = J.JOB_ID
GROUP BY CUBE
    (E.JOB_ID, E.SALARY)
HAVING
    E.JOB_ID = 'IT_PROG' OR E.JOB_ID LIKE '%_CLERK'
ORDER BY 
    E.JOB_ID ASC;
    
SELECT 
    MAX(J.JOB_TITLE) TITLE, MAX(FIRST_NAME) EMPLOYEE, SUM(E.SALARY) TOTAL
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.JOBS J
ON E.JOB_ID = J.JOB_ID
GROUP BY CUBE
    (E.JOB_ID, E.SALARY)
HAVING
--    E.JOB_ID = 'IT_PROG' OR E.JOB_ID LIKE '%_CLERK'
    E.JOB_ID = 'IT_PROG' OR E.JOB_ID LIKE 'PU_CLERK'
ORDER BY 
    E.JOB_ID ASC;
    
SELECT 
    MAX((SELECT JOB_TITLE FROM HR.JOBS WHERE J.JOB_ID = JOB_ID)) TITLE, 
    MAX((SELECT FIRST_NAME FROM HR.EMPLOYEES WHERE E.EMPLOYEE_ID = EMPLOYEE_ID)) EMPLOYEE, 
    SUM(E.SALARY) TOTAL
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.JOBS J
ON E.JOB_ID = J.JOB_ID
GROUP BY ROLLUP
    (E.JOB_ID, E.SALARY)
HAVING
--    E.JOB_ID = 'IT_PROG' OR E.JOB_ID LIKE '%_CLERK'
    E.JOB_ID = 'IT_PROG' OR E.JOB_ID LIKE 'PU_CLERK'
ORDER BY 
    E.JOB_ID ASC;
    
    
SELECT 
    MAX((SELECT JOB_TITLE FROM HR.JOBS WHERE J.JOB_ID = JOB_ID)) TITLE, 
    MAX((SELECT FIRST_NAME FROM HR.EMPLOYEES WHERE E.EMPLOYEE_ID = EMPLOYEE_ID)) EMPLOYEE, 
    SUM(E.SALARY) TOTAL
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.JOBS J
ON E.JOB_ID = J.JOB_ID
GROUP BY ROLLUP
    (E.JOB_ID, E.SALARY)
HAVING
    E.JOB_ID = 'IT_PROG' OR E.JOB_ID LIKE '%_CLERK'
--    E.JOB_ID = 'IT_PROG' OR E.JOB_ID LIKE 'PU_CLERK'
ORDER BY 
    E.JOB_ID ASC;
    
SELECT 
    MAX((SELECT JOB_TITLE FROM HR.JOBS WHERE J.JOB_ID = JOB_ID)) TITLE, 
    MAX((SELECT FIRST_NAME FROM HR.EMPLOYEES WHERE E.EMPLOYEE_ID = EMPLOYEE_ID)) EMPLOYEE, 
    SUM(E.SALARY) TOTAL,
    GROUPING(E.SALARY) GROUPING_VALUE
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.JOBS J
ON E.JOB_ID = J.JOB_ID
GROUP BY ROLLUP
    (E.JOB_ID, E.SALARY)
HAVING
    E.JOB_ID = 'IT_PROG' OR E.JOB_ID LIKE '%_CLERK'
--    E.JOB_ID = 'IT_PROG' OR E.JOB_ID LIKE 'PU_CLERK'
ORDER BY 
    E.JOB_ID ASC;


------ Without cursor solution
SELECT 
    CASE GROUPING(E.SALARY)
    WHEN 0 THEN MAX((SELECT JOB_TITLE FROM HR.JOBS WHERE J.JOB_ID = JOB_ID))
    WHEN 1 THEN NULL
    END TITLE,
    CASE GROUPING(E.SALARY)
    WHEN 0 THEN MAX((SELECT FIRST_NAME FROM HR.EMPLOYEES WHERE E.EMPLOYEE_ID = EMPLOYEE_ID))
    WHEN 1 THEN 'Subtotal'
    END EMPLOYEE,
    SUM(E.SALARY) TOTAL
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.JOBS J
ON E.JOB_ID = J.JOB_ID
GROUP BY ROLLUP
    (E.JOB_ID, E.SALARY)
HAVING
    E.JOB_ID = 'IT_PROG' OR E.JOB_ID LIKE '%_CLERK'
   
UNION ALL

SELECT 
    NULL TITLE,
    'Grand Total' EMPLOYEE, 
    SUM(TEMP.TOTAL) TOTAL
FROM    
(
    SELECT 
        MAX((SELECT JOB_TITLE FROM HR.JOBS WHERE J.JOB_ID = JOB_ID)) TITLE, 
        MAX((SELECT FIRST_NAME FROM HR.EMPLOYEES WHERE E.EMPLOYEE_ID = EMPLOYEE_ID)) EMPLOYEE, 
        SUM(E.SALARY) TOTAL,
        GROUPING(E.SALARY) GROUPING_VALUE
    FROM 
        HR.EMPLOYEES E
    INNER JOIN
        HR.JOBS J
    ON E.JOB_ID = J.JOB_ID
    GROUP BY ROLLUP
        (E.JOB_ID, E.SALARY)
    HAVING
          E.JOB_ID = 'IT_PROG' OR E.JOB_ID LIKE '%_CLERK'
    ORDER BY 
        E.JOB_ID ASC
) TEMP
WHERE
    TEMP.GROUPING_VALUE = 1;


------ Cursor solution
SET SERVEROUTPUT ON;

DECLARE
CURSOR cursor_employees_01 IS 
SELECT 
    CASE GROUPING(E.SALARY)
    WHEN 0 THEN MAX((SELECT JOB_TITLE FROM HR.JOBS WHERE J.JOB_ID = JOB_ID))
    WHEN 1 THEN ' '
    END TITLE,
    CASE GROUPING(E.SALARY)
    WHEN 0 THEN MAX((SELECT FIRST_NAME FROM HR.EMPLOYEES WHERE E.EMPLOYEE_ID = EMPLOYEE_ID))
    WHEN 1 THEN 'Subtotal'
    END EMPLOYEE,
    SUM(E.SALARY) TOTAL
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.JOBS J
ON E.JOB_ID = J.JOB_ID
GROUP BY ROLLUP
    (E.JOB_ID, E.SALARY)
    HAVING
        E.JOB_ID = 'IT_PROG' OR E.JOB_ID LIKE '%_CLERK';
-- title VARCHAR2(100);
-- employee VARCHAR2(100);
-- subtotal NUMBER(8,0);
title HR.JOBS.JOB_TITLE%type;
employee HR.EMPLOYEES.FIRST_NAME%type;
subtotal HR.EMPLOYEES.SALARY%type;
total NUMBER(8,0);

BEGIN

total := 0;
OPEN cursor_employees_01;

DBMS_OUTPUT.PUT_LINE('');
-- Dbms_output.put_line('Title     Employee        Total');
DBMS_OUTPUT.PUT_LINE(RPAD('Title',20) || RPAD('Employee' ,20) || RPAD('Total' ,10));
DBMS_OUTPUT.PUT_LINE('');
LOOP
FETCH cursor_employees_01 INTO title, employee, subtotal;

IF cursor_employees_01%NOTFOUND THEN
    EXIT;
END IF;

IF title <> ' ' THEN
    total := total + subtotal;
END IF;

-- Dbms_output.put_line(title || '      ' || employee || '        ' || subtotal);
DBMS_OUTPUT.PUT_LINE(RPAD(title,20) || RPAD(employee ,20) || RPAD(subtotal ,10));

-- Dbms_output.put_line('Job Fetched:' || title);
-- Dbms_output.put_line('Employee Fetched:' || employee);
-- Dbms_output.put_line('Subtotal Fetched:' || subtotal);
END LOOP;
-- Dbms_output.put_line('Grand Total:' || RPAD(total,20));
DBMS_OUTPUT.PUT_LINE(RPAD(' ',20) || RPAD('Grand Total' ,20) || RPAD(total ,10));

CLOSE cursor_employees_01;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No data was found - '||SQLERRM);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error was encountered - '||SQLERRM);
END;
/


/*
    Desplegar employees cuya commision sea null .
*/

SELECT 
    *
FROM 
    HR.EMPLOYEES E;
    
SELECT 
    *
FROM 
    HR.DEPARTMENTS;
    
SELECT 
    *
FROM 
    HR.EMPLOYEES E
WHERE E.COMMISSION_PCT IS NULL;

------ Without cursor solution
SELECT 
    E.FIRST_NAME EMPLOYEE,
    D.DEPARTMENT_NAME DEPARTMENT
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.DEPARTMENTS D
ON
    E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE 
    E.COMMISSION_PCT IS NULL
ORDER BY
    D.DEPARTMENT_NAME ASC;

------ Cursor solution
SET SERVEROUTPUT ON;

DECLARE
CURSOR cursor_employees_02 IS 
SELECT 
    E.FIRST_NAME EMPLOYEE,
    D.DEPARTMENT_NAME DEPARTMENT
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.DEPARTMENTS D
ON
    E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE 
    E.COMMISSION_PCT IS NULL
ORDER BY
    D.DEPARTMENT_NAME ASC;
employee HR.EMPLOYEES.FIRST_NAME%type;
department HR.DEPARTMENTS.DEPARTMENT_NAME%type;

BEGIN

OPEN cursor_employees_02;

DBMS_OUTPUT.PUT_LINE('');
DBMS_OUTPUT.PUT_LINE(RPAD('Employee' ,20) || RPAD('Department' ,20));
DBMS_OUTPUT.PUT_LINE('');
LOOP
FETCH cursor_employees_02 INTO employee, department;

IF cursor_employees_02%NOTFOUND THEN
    EXIT;
END IF;

Dbms_output.put_line(RPAD(employee ,20) || RPAD(department ,20));

END LOOP;

CLOSE cursor_employees_02;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.put_line('No data was found - '||SQLERRM);
    WHEN OTHERS THEN
        DBMS_OUTPUT.put_line('An error was encountered - '||SQLERRM);
END;
/


/*
    Calcula un bono adicional que afecte su comision actual de un empleado dado (emp y dept) en funcion del departamento que labore
    
    ACCOUNTING recibira bono adicional de 10%
    RESEARCH recibira bono adicional de 15%
    SALES recibira bono adicional de 20%
    OPERATIONS recibira bono adicional de 25%
    
    Datos de entrada employee id 145
    Datos de salida
    Comision: 1400
    Departamento: SALES
    Bono adicional: 280 Nuevo
    Salario: 1680
*/

SELECT 
    *
FROM 
    HR.EMPLOYEES E;

SELECT 
    *
FROM 
    HR.EMPLOYEES E
WHERE
    E.EMPLOYEE_ID=145;

SELECT 
    E.commission_pct, 
    E.SALARY 
FROM 
    HR.EMPLOYEES E
WHERE
    E.EMPLOYEE_ID=145;

SELECT 
    MAX(E.EMPLOYEE_ID) EMPLOYEE_ID,
    SUM(E.salary*E.commission_pct) COMISION, 
    D.DEPARTMENT_NAME,
    SALARY
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.DEPARTMENTS D
ON
    E.DEPARTMENT_ID=D.DEPARTMENT_ID
WHERE
    E.EMPLOYEE_ID=145 
GROUP BY 
    D.DEPARTMENT_NAME, E.SALARY;


SELECT 
    MAX(E.EMPLOYEE_ID) EMPLOYEE_ID,
    SUM(E.SALARY*E.COMMISSION_PCT) COMISION, 
    D.DEPARTMENT_NAME,
    E.SALARY,
    MAX(E.BONO) BONO
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.DEPARTMENTS D
ON
    E.DEPARTMENT_ID=D.DEPARTMENT_ID
WHERE
    UPPER(D.DEPARTMENT_NAME) in ('ACCOUNTING', 'RESEARCH', 'SALES', 'OPERATIONS')
GROUP BY 
    D.DEPARTMENT_NAME, E.SALARY;


SELECT 
    MAX((SELECT EMPLOYEE_ID FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=E.EMPLOYEE_ID)) EMPLOYEE_ID,
    SUM(E.SALARY*E.COMMISSION_PCT) COMISION, 
    D.DEPARTMENT_NAME,
    E.SALARY,
    MAX((SELECT BONO FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=E.EMPLOYEE_ID)) BONO
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.DEPARTMENTS D
ON
    E.DEPARTMENT_ID=D.DEPARTMENT_ID
WHERE
    UPPER(D.DEPARTMENT_NAME) in ('ACCOUNTING', 'RESEARCH', 'SALES', 'OPERATIONS')
GROUP BY 
    D.DEPARTMENT_NAME, E.SALARY;


SELECT 
    MAX((SELECT EMPLOYEE_ID FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=E.EMPLOYEE_ID)) EMPLOYEE_ID,
    SUM(E.SALARY*E.COMMISSION_PCT) COMISION, 
    D.DEPARTMENT_NAME,
    E.SALARY,
    MAX((SELECT BONO FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=E.EMPLOYEE_ID)) BONO,
    CASE UPPER(D.DEPARTMENT_NAME)
    WHEN 'ACCOUNTING' THEN MAX(0.10*E.SALARY)
    WHEN 'RESEARCH' THEN MAX(0.15*E.SALARY)
    WHEN 'SALES' THEN MAX(0.20*E.SALARY)
    WHEN 'OPERATIONS' THEN MAX(0.25*E.SALARY)
    END BONO_ADICIONAL,
    CASE UPPER(D.DEPARTMENT_NAME)
    WHEN 'ACCOUNTING' THEN MAX(E.salary + (0.10*E.SALARY) + (E.SALARY*E.COMMISSION_PCT))
    WHEN 'RESEARCH' THEN MAX(E.salary + (0.15*E.SALARY) + (E.SALARY*E.COMMISSION_PCT))
    WHEN 'SALES' THEN MAX(E.salary + (0.20*E.SALARY) + (E.SALARY*E.COMMISSION_PCT))
    WHEN 'OPERATIONS' THEN MAX(E.salary + (0.25*E.SALARY) + (E.SALARY*E.COMMISSION_PCT))
    END NEW_SALARY
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.DEPARTMENTS D
ON
    E.DEPARTMENT_ID=D.DEPARTMENT_ID
WHERE
    UPPER(D.DEPARTMENT_NAME) in ('ACCOUNTING', 'RESEARCH', 'SALES', 'OPERATIONS')
GROUP BY 
    D.DEPARTMENT_NAME, E.SALARY
ORDER BY EMPLOYEE_ID;


-- Without cursor solution
SELECT 
    E.EMPLOYEE_ID,
    SUM(E.SALARY*E.COMMISSION_PCT) COMISION, 
    D.DEPARTMENT_NAME,
    E.SALARY,
    MAX((SELECT BONO FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=E.EMPLOYEE_ID)) BONO,
    CASE UPPER(D.DEPARTMENT_NAME)
    WHEN 'ACCOUNTING' THEN MAX(0.10*E.SALARY)
    WHEN 'RESEARCH' THEN MAX(0.15*E.SALARY)
    WHEN 'SALES' THEN MAX(0.20*E.SALARY)
    WHEN 'OPERATIONS' THEN MAX(0.25*E.SALARY)
    END BONO_ADICIONAL,
    CASE UPPER(D.DEPARTMENT_NAME)
    WHEN 'ACCOUNTING' THEN MAX(E.salary + (0.10*E.SALARY) + (E.SALARY*E.COMMISSION_PCT))
    WHEN 'RESEARCH' THEN MAX(E.salary + (0.15*E.SALARY) + (E.SALARY*E.COMMISSION_PCT))
    WHEN 'SALES' THEN MAX(E.salary + (0.20*E.SALARY) + (E.SALARY*E.COMMISSION_PCT))
    WHEN 'OPERATIONS' THEN MAX(E.salary + (0.25*E.SALARY) + (E.SALARY*E.COMMISSION_PCT))
    END NEW_SALARY
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.DEPARTMENTS D
ON
    E.DEPARTMENT_ID=D.DEPARTMENT_ID
WHERE
    UPPER(D.DEPARTMENT_NAME) in ('ACCOUNTING', 'RESEARCH', 'SALES', 'OPERATIONS')
GROUP BY 
    D.DEPARTMENT_NAME, E.EMPLOYEE_ID, E.SALARY
ORDER BY EMPLOYEE_ID;


START TRANSACTION;
UPDATE HR.EMPLOYEES SET BONO=2800 WHERE EMPLOYEE_ID=145;
UPDATE HR.EMPLOYEES SET BONO=null WHERE EMPLOYEE_ID=145; 
COMMIT;
ROLLBACK;
SELECT BONO FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=145;


-- Cursor solution
SET FEEDBACK ON;
-- SET FEEDBACK OFF;
-- SET VERIFY ON;
SET VERIFY OFF;
-- ACCEPT x CHAR FORMAT 'A20' PROMPT 'Enter Employee ID: ';
ACCEPT x NUMBER(6,1) PROMPT 'Enter Employee ID: ';
SET SERVEROUTPUT ON;
<<LOCAL>>
DECLARE
employeeID NUMBER(6,0);
bono NUMBER(6,1);
CURSOR cursor_employees_03 IS 
SELECT 
    E.EMPLOYEE_ID,
    SUM(E.SALARY*E.COMMISSION_PCT) COMISION, 
    D.DEPARTMENT_NAME,
    E.SALARY
FROM 
    HR.EMPLOYEES E
INNER JOIN
    HR.DEPARTMENTS D
ON
    E.DEPARTMENT_ID=D.DEPARTMENT_ID
WHERE
    E.EMPLOYEE_ID=employeeID 
--    E.EMPLOYEE_ID=145
GROUP BY 
    D.DEPARTMENT_NAME, E.EMPLOYEE_ID, E.SALARY;
record_employees cursor_employees_03%ROWTYPE;
-- type_info varchar2(400);

BEGIN
-- employeeID:= 145;
employeeID:= &x;

/*
FOR record_employees IN cursor_employees_03 
LOOP
EXIT WHEN cursor_employees_03%NOTFOUND;
*/

OPEN cursor_employees_03;
LOOP
FETCH cursor_employees_03 INTO record_employees;
EXIT WHEN cursor_employees_03%NOTFOUND;

IF UPPER(record_employees.DEPARTMENT_NAME) = 'ACCOUNTING' THEN
    bono:=0.10*record_employees.SALARY;
ELSIF UPPER(record_employees.DEPARTMENT_NAME) = 'RESEARCH' THEN
    bono:=0.15*record_employees.SALARY;
ELSIF UPPER(record_employees.DEPARTMENT_NAME) = 'SALES' THEN
    bono:=0.20*record_employees.SALARY;
ELSIF UPPER(record_employees.DEPARTMENT_NAME) = 'OPERATIONS' THEN
    bono:=0.025*record_employees.SALARY;
END IF; 

UPDATE HR.EMPLOYEES SET BONO=bono WHERE EMPLOYEE_ID=record_employees.EMPLOYEE_ID;

-- SELECT DUMP(record_employees.EMPLOYEE_ID) INTO type_info FROM DUAL;
-- DBMS_OUTPUT.PUT_LINE(type_info);

DBMS_OUTPUT.PUT_LINE('');
DBMS_OUTPUT.PUT_LINE('EMPLOYEE_ID: ' || record_employees.EMPLOYEE_ID);
DBMS_OUTPUT.PUT_LINE('COMISION: ' || record_employees.COMISION);
DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO: ' || record_employees.DEPARTMENT_NAME);
DBMS_OUTPUT.PUT_LINE('BONO ADICIONAL: ' || bono);
DBMS_OUTPUT.PUT_LINE('SALARIO: ' || record_employees.SALARY);
DBMS_OUTPUT.PUT_LINE('NUEVO SALARIO (BONO + COMISSION): ' || (record_employees.SALARY + record_employees.COMISION + bono));

END LOOP;

CLOSE cursor_employees_03;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.put_line('No data was found - '||SQLERRM);
    WHEN OTHERS THEN
        DBMS_OUTPUT.put_line('An error was encountered - '||SQLERRM);
END;
/
SELECT BONO FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=145;


-- Cursor solution 2
SET FEEDBACK ON;
-- SET FEEDBACK OFF;
-- SET VERIFY ON;
SET VERIFY OFF;
-- ACCEPT x CHAR FORMAT 'A20' PROMPT 'Enter Employee ID: ';
ACCEPT x NUMBER(6,1) PROMPT 'Enter Employee ID: ';
SET SERVEROUTPUT ON;
<<LOCAL>>
DECLARE
employeeID NUMBER(6,0);
bono NUMBER(6,1);
-- type_info varchar2(400);

BEGIN
-- employeeID:= 145;
employeeID:= &x;

FOR row IN (
    SELECT 
        E.EMPLOYEE_ID,
        SUM(E.SALARY*E.COMMISSION_PCT) COMISION, 
        D.DEPARTMENT_NAME,
        E.SALARY
    FROM 
        HR.EMPLOYEES E
    INNER JOIN
        HR.DEPARTMENTS D
    ON
        E.DEPARTMENT_ID=D.DEPARTMENT_ID
    WHERE
        E.EMPLOYEE_ID=employeeID 
    GROUP BY 
        D.DEPARTMENT_NAME, E.EMPLOYEE_ID, E.SALARY
) 
LOOP

IF UPPER(row.DEPARTMENT_NAME) = 'ACCOUNTING' THEN
    bono:=0.10*row.SALARY;
ELSIF UPPER(row.DEPARTMENT_NAME) = 'RESEARCH' THEN
    bono:=0.15*row.SALARY;
ELSIF UPPER(row.DEPARTMENT_NAME) = 'SALES' THEN
    bono:=0.20*row.SALARY;
ELSIF UPPER(row.DEPARTMENT_NAME) = 'OPERATIONS' THEN
    bono:=0.025*row.SALARY;
END IF; 

UPDATE HR.EMPLOYEES SET BONO=bono WHERE EMPLOYEE_ID=row.EMPLOYEE_ID;
-- UPDATE HR.EMPLOYEES SET BONO=bono WHERE CURRENT OF cursor_employees_03;

-- SELECT DUMP(record_employees.EMPLOYEE_ID) INTO type_info FROM DUAL;
-- DBMS_OUTPUT.PUT_LINE(type_info);

DBMS_OUTPUT.PUT_LINE('');
DBMS_OUTPUT.PUT_LINE('EMPLOYEE_ID: ' || row.EMPLOYEE_ID);
DBMS_OUTPUT.PUT_LINE('COMISION: ' || row.COMISION);
DBMS_OUTPUT.PUT_LINE('DEPARTAMENTO: ' || row.DEPARTMENT_NAME);
DBMS_OUTPUT.PUT_LINE('BONO ADICIONAL: ' || bono);
DBMS_OUTPUT.PUT_LINE('SALARIO: ' || row.SALARY);
DBMS_OUTPUT.PUT_LINE('NUEVO SALARIO (BONO + COMISSION): ' || (row.SALARY + row.COMISION + bono));

END LOOP;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.put_line('No data was found - '||SQLERRM);
    WHEN OTHERS THEN
        DBMS_OUTPUT.put_line('An error was encountered - '||SQLERRM);
END;
/
SELECT BONO FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=145;

